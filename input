// droplet parameters
XCOM=0.5
YCOM=0.5
ZCOM=0.5
R=0.25

// FE mesh related and model parameters
MESH_FILENAME = "/xlwork1/scott/new_mesh_by_scott/LVtrunk_heart_real.xda"
MESH_LENGTH_UNIT = "mm"
FIBER_DIRECTION_FILENAME = "/xlwork1/scott/new_mesh_by_scott/Results_fiber/fiberDir.txt"              // fiber (f0) direction field
SHEET_DIRECTION_FILENAME = "/xlwork1/scott/new_mesh_by_scott/Results_fiber/sheetDir.txt"              // sheet (s0) direction field
ENDO_POINTS_LIST         = "/xlwork1/scott/new_mesh_by_scott/endo_nodes.txt"

TOTAL_NODE_NUM = 16403
TOTAL_ELEM_NUM = 82290
TOTAL_ENDO_NODES = 1779


ELEM_ORDER = "FIRST"
FULL_QUAD_ORDER = "FIFTH"
REDUCED_QUAD_ORDER = "FIRST"
ENABLE_ACTIVE_TENSION = TRUE
KAPPA = 1.0e6
BETA_S =1.0e6



//------------------------------------------------------------------------------------------------
//MESH_FILENAME = "/xlwork1/scott/patient1120/LVtrunk_heart_real.xda"
//MESH_LENGTH_UNIT = "mm"
//FIBER_DIRECTION_FILENAME = "/xlwork1/scott/patient1120/fiberDir.txt"              // fiber (f0) direction field
//SHEET_DIRECTION_FILENAME = "/xlwork1/scott/patient1120/sheetDir.txt"              // sheet (s0) direction field
//ENDO_POINTS_LIST         = "/xlwork1/scott/patient1120/endoNodes_1120.txt"

//TOTAL_NODE_NUM = 31856
//TOTAL_ELEM_NUM = 28650
//TOTAL_ENDO_NODES = 2896
//------------------------------------------------------------------------------------------------

TIME_PERIOD = 1.1                                // define the length of a single cycle


SINGLE_CYCLE_LENGTH=TIME_PERIOD
TPER_CNM=TIME_PERIOD

// parameters relating to the coronary network model

EXP_PAO_TO_FILE  =  TRUE            //whether or not we want to save all external pressure, pao data to file, only needed for starting up coronary code
AHA_TO_SUBDOMAINS  =  FALSE            //true if data needs to be converted from aha to subdomains, false otherwise
SEND_SOURCE_FROM_CORO  =  TRUE            //true if coronary model is switched on, false if other sink/source
VISUALISE_CORO_DATA  =  TRUE            //if want information the coronary data saved to visit, useful to visualise
OUTPUT_CORO_DATA_TO_SCREEN  =  TRUE            //if want information regarding sinks/source/volumes printed to screen
OUTPUT_CORO_DATA_TO_FILE  =  TRUE            //if want information regarding sinks/source/volumes printed to file


PLTS = 256             // Number of plots per period.
TMSTPS = 65536      // The number of timesteps per period.

CONV_CNM = 1333.22387415             // Conversion from mmHg to SI-units.
RHO_CNM = 1.055                 // Density of blood [g/cm^3].
MU1_CNM = 0.049                 // Viscosity of blood [g/cm/s].
MU_PL_CNM = 0.049                 // Viscosity of blood [g/cm/s].
NU_CNM = MU1_CNM/RHO_CNM
FCST = 50.0                          // Determines the damping coeff.
LR = 0.25                              // characteristic radius of the vessels in the tree [cm]. was 0.25
LR2 = LR*LR                     // The squared radius [cm2].
LR3 = LR*LR*LR                // The radius to the third power [cm^3].
GG = 981.0                            // The gravitational force [cm/s^2].
QQ = 10.0*LR2                // The characteristic flow [cm^3/s].
RE = QQ*RHO_CNM/MU1_CNM/LR      // Reynolds number.
FR2 = (QQ*QQ)/(GG)/(LR*LR*LR*LR*LR)  // The squared Froudes number. - Fr2    = sq(qq)/gg/pow(0.25,5)
PERIOD = TIME_PERIOD*QQ/LR3
P0 = 0.0                    // Ensures a certain diastolic pressure. (Unstressed pressure)
DYNE_TO_MMHG=1.0/CONV_CNM   //Direct conversion to mmHg


DELTAT = PERIOD/PLTS        // Interval between each point which is plotted.

TSTART1 = 0.0
TEND1 = 0.0
FINALTIME1=0.0
ONEPERIODDT=PERIOD/TMSTPS

TIMESTEPDISCREPENCY=1 //how many more time steps the fluid/solver runs than the coronary model

DT = TIME_PERIOD/65536

T_SCALE = 2.8
P_LOAD =  8.0                        //8.0 mmHg

DIASTOLE_SYSTOLE_DIFFERENCE = 1.0                 //how much smaller the time step should be is systole

DT_SYSTOLE = DT/DIASTOLE_SYSTOLE_DIFFERENCE      // DT step in systole, Active contraction needs much smaller DT
T_END_DIASTOLE = 0.5                             // at what time in the cycle should diastole end
T_LOAD = T_END_DIASTOLE                          // time over which the pressure load is applied (s), keep the same
NO_OF_CYCLES = 4.0                               // set how many cycles the code should run for

T_END = TIME_PERIOD*NO_OF_CYCLES                 // compute the end simulation time


//--------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------


// model parameters
RHO = 1.00                                // fluid density (gm cm^-3)
MU  = 0.04                                // fluid viscosity (gm cm^-1 s^-1)
NORMALIZE_STRESS = TRUE                   // whether to normalize the stress to equal zero in the reference configuration

CIsoContract = -0.001                     // LV compliance for iso volumetric contraction

P_AVOPEN     = 80.0                         // LV cavity pressure when AV opens, arterial pressure 109/55
P_AO_OPEN     = 80.0

LV_CIsoRelax = CIsoContract*10               //

//--------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------


// Parameters for the fluid solver
BIOT_MODULUS = 2180000.0                  // Biot Modulus
PHI_0 = 0.15
KAPPA_0 = 0.01
CAP_K = 2200000.0                         // penalty parameter

//parameters related to the sink/source -  only applicable if sink/source not coming from coro model
BETA_A=0.000003
BETA_V=0.003
P_A=27000.0
P_V=13000.0

// surface tension parameters
DELTA_FUNCTION = "BSPLINE_3"
SIGMA = 0.24
NUM_INTERFACE_CELLS = 5.0
LA    = 12000
RHO_O = 1.0
RHO_I = 1.0
MU_O  = sqrt(RHO_O*2*R*SIGMA/LA)
MU_I  = sqrt(RHO_I*2*R*SIGMA/LA)

// grid spacing parameters
L_X = 15.0
L_Y = 15.0
L_Z = 20.0
MAX_LEVELS = 1        // maximum number of levels in locally refined grid
REF_RATIO  = 2        // refinement ratio between levels
REF_RATIO_FINEST = 4  // refinement ratio for the finest level.


NX_FINEST = 64                                        // finest grid spacing in the X direction
NY_FINEST = 64                                       // finest grid spacing in the Y direction
NZ_FINEST = 64                                       // finest grid spacing in the Z direction
NX_COARSEST = NX_FINEST/(REF_RATIO^(MAX_LEVELS - 1))  // coarsest grid spacing in the X direction
NY_COARSEST = NY_FINEST/(REF_RATIO^(MAX_LEVELS - 1))  // coarsest grid spacing in the Y direction
NZ_COARSEST = NZ_FINEST/(REF_RATIO^(MAX_LEVELS - 1))  // coarsest grid spacing in the Z direction
DX_FINEST = L_X/NX_FINEST                             // finest   mesh width   in the X direction
DY_FINEST = L_Y/NY_FINEST                             // finest   mesh width   in the Y direction
DZ_FINEST = L_Z/NZ_FINEST                             // finest   mesh width   in the Z direction
DX_COARSEST = L_X/NX_COARSEST                         // coarsest mesh width   in the X direction
DY_COARSEST = L_Y/NY_COARSEST                         // coarsest mesh width   in the Y direction
DZ_COARSEST = L_Z/NZ_COARSEST
H_COARSEST =  DX_COARSEST

// Level set parameters
LS_ORDER              = "THIRD_ORDER_WENO"
LS_ABS_TOL            = 1.0e-8
LS_REINIT_INTERVAL    = 1
MAX_ITERATIONS        = 50
LS_TAG_VALUE          = 0.0
LS_TAG_ABS_THRESH     = 5.0*H_COARSEST
APPLY_SIGN_FIX        = TRUE
APPLY_SUBCELL_FIX     = TRUE
APPLY_MASS_CONSTRAINT = FALSE

VelocityInitialConditions {
   function_0 = "0.0"
   function_1 = "0.0"
   function_2 = "0.0"
}

VelocityBcCoefs_0 {
   acoef_function_0 = "0.0"
   acoef_function_1 = "0.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"
   acoef_function_4 = "1.0"
   acoef_function_5 = "1.0"

   bcoef_function_0 = "1.0"
   bcoef_function_1 = "1.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"
   bcoef_function_4 = "0.0"
   bcoef_function_5 = "0.0"

   gcoef_function_0 = "0.0"
   gcoef_function_1 = "0.0"
   gcoef_function_2 = "0.0"
   gcoef_function_3 = "0.0"
   gcoef_function_4 = "0.0"
   gcoef_function_5 = "0.0"
}

VelocityBcCoefs_1 {
   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "0.0"
   acoef_function_3 = "0.0"
   acoef_function_4 = "1.0"
   acoef_function_5 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "1.0"
   bcoef_function_3 = "1.0"
   bcoef_function_4 = "0.0"
   bcoef_function_5 = "0.0"

   gcoef_function_0 = "0.0"
   gcoef_function_1 = "0.0"
   gcoef_function_2 = "0.0"
   gcoef_function_3 = "0.0"
   gcoef_function_4 = "0.0"
   gcoef_function_5 = "0.0"
}


VelocityBcCoefs_2 {
   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"
   acoef_function_4 = "0.0"
   acoef_function_5 = "0.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"
   bcoef_function_4 = "1.0"
   bcoef_function_5 = "1.0"

   gcoef_function_0 = "0.0"
   gcoef_function_1 = "0.0"
   gcoef_function_2 = "0.0"
   gcoef_function_3 = "0.0"
   gcoef_function_4 = "0.0"
   gcoef_function_5 = "0.0"
}


// Simulation Parameters
SOLVER_TYPE          = "STAGGERED"
START_TIME           =   0.0e0     // initial simulation time
END_TIME             =   T_END    // final simulation time
GROW_DT              =   2.0e0     // growth factor for timesteps
MAX_INTEGRATOR_STEPS =   500000  // max number of simulation timesteps
REGRID_INTERVAL      =   1
CFL_MAX              =   0.3
NUM_INS_CYCLES       =   1
CONVECTIVE_OP_TYPE   = "PPM"                      // convective differencing discretization type
NON_CONSERVATIVE_CONVECTIVE_OP_TYPE  = "PPM"
CONVECTIVE_FORM      = "ADVECTIVE"                // how to compute the convective terms
INIT_CONVECTIVE_TS_TYPE = "FORWARD_EULER"
CONVECTIVE_TS_TYPE = "ADAMS_BASHFORTH"    // convective time stepping type
NORMALIZE_PRESSURE   = FALSE
VORTICITY_TAGGING    = FALSE                       // whether to tag cells for refinement based on vorticity thresholds
TAG_BUFFER           = 2                          // size of tag buffer used by grid generation algorithm
REGRID_CFL_INTERVAL  = 0.3                        // regrid whenever any material point could have moved 0.5 meshwidths since previous regrid
DT_MAX               = DT

//DT_MAX               = 0.00005

OUTPUT_U             = TRUE
OUTPUT_P             = TRUE
OUTPUT_F             = TRUE
OUTPUT_OMEGA         = TRUE
OUTPUT_DIV_U         = TRUE
OUTPUT_RHO           = TRUE
OUTPUT_Q             = TRUE
OUTPUT_MU            = FALSE
RHO_IS_CONST         = FALSE
MU_IS_CONST          = FALSE
ERROR_ON_DT_CHANGE   = FALSE

// More solver parameters
PRECOND_REINIT_INTERVAL = 10
VC_INTERPOLATION_TYPE   = "VC_AVERAGE_INTERP"
CONDITION_NO_SCALE   = 1.0
EXPLICITLY_REMOVE_NULLSPACE = FALSE
ENABLE_LOGGING       = TRUE

// solver parameters for IBFE
USE_IB_DELTA_FUNCTIONS          = TRUE
IB_DELTA_FUNCTION                       = "IB_4"
SPLIT_FORCES                            = FALSE
USE_JUMP_CONDITIONS                     = FALSE
USE_CONSISTENT_MASS_MATRIX  = TRUE
IB_POINT_DENSITY                        = 2.0


PressureInitialConditions {
   function = "0.0"
}

//IBFE configuration
IBFEMethod {
   use_IB_spread_operator     = USE_IB_DELTA_FUNCTIONS
   use_IB_interp_operator     = USE_IB_DELTA_FUNCTIONS
   IB_delta_fcn               = IB_DELTA_FUNCTION
   split_forces               = SPLIT_FORCES
   use_jump_conditions        = USE_JUMP_CONDITIONS
   use_consistent_mass_matrix = USE_CONSISTENT_MASS_MATRIX
   IB_point_density           = IB_POINT_DENSITY
}

IBExplicitHierarchyIntegrator {
   start_time          = START_TIME
   end_time            = END_TIME
   grow_dt             = GROW_DT
   num_cycles          = NUM_INS_CYCLES
   regrid_cfl_interval = REGRID_CFL_INTERVAL
   dt_max              = DT_MAX
   enable_logging      = ENABLE_LOGGING
   error_on_dt_change  = ERROR_ON_DT_CHANGE
}


INSStaggeredHierarchyIntegrator {
   mu                         = MU
   rho                        = RHO
   start_time                 = START_TIME
   end_time                   = END_TIME
   grow_dt                    = GROW_DT
   convective_op_type         = CONVECTIVE_OP_TYPE
   convective_difference_form = CONVECTIVE_FORM
   normalize_pressure         = NORMALIZE_PRESSURE
   cfl                        = CFL_MAX
   dt_max                     = DT
   using_vorticity_tagging    = VORTICITY_TAGGING
   vorticity_rel_thresh       = 0.25 , 0.125
   tag_buffer                 = TAG_BUFFER
   output_U                   = OUTPUT_U
   output_P                   = OUTPUT_P
   output_F                   = OUTPUT_F
   output_Omega               = OUTPUT_OMEGA
   output_Div_U               = OUTPUT_DIV_U
   enable_logging             = ENABLE_LOGGING
}


// AdvDiff solver parameters
ADV_DIFF_SOLVER_TYPE        = "SEMI_IMPLICIT"   // the advection-diffusion solver to use
ADV_DIFF_NUM_CYCLES         = 2                 // number of cycles of fixed-point iteration
ADV_DIFF_CONVECTIVE_TS_TYPE = "MIDPOINT_RULE" // convective time stepping type
ADV_DIFF_CONVECTIVE_OP_TYPE = "PPM"             // convective differencing discretization type
ADV_DIFF_CONVECTIVE_FORM    = "CONSERVATIVE"	   // how to compute the convective terms


INSVCStaggeredNonConservativeHierarchyIntegrator {
   start_time                 = START_TIME
   end_time                   = END_TIME
   grow_dt                    = GROW_DT
   convective_op_type         = NON_CONSERVATIVE_CONVECTIVE_OP_TYPE
   convective_difference_form = CONVECTIVE_FORM
   normalize_pressure         = NORMALIZE_PRESSURE
   init_convective_time_stepping_type = INIT_CONVECTIVE_TS_TYPE
   convective_time_stepping_type = CONVECTIVE_TS_TYPE
   cfl                        = CFL_MAX
   dt_max                     = DT_MAX
   using_vorticity_tagging    = VORTICITY_TAGGING
   vorticity_rel_thresh       = 0.25
   tag_buffer                 = TAG_BUFFER
   regrid_interval            = REGRID_INTERVAL
   output_U                   = OUTPUT_U
   output_P                   = OUTPUT_P
   output_F                   = OUTPUT_F
   output_Omega               = OUTPUT_OMEGA
   output_Div_U               = OUTPUT_DIV_U
   output_rho                 = OUTPUT_RHO
   output_mu                  = OUTPUT_MU
   rho_is_const               = RHO_IS_CONST
   mu_is_const                = MU_IS_CONST
   precond_reinit_interval    = PRECOND_REINIT_INTERVAL
   condition_no_scaling       = CONDITION_NO_SCALE
   vc_interpolation_type      = VC_INTERPOLATION_TYPE
   enable_logging             = ENABLE_LOGGING
   max_integrator_steps       = MAX_INTEGRATOR_STEPS
   explicitly_remove_nullspace= EXPLICITLY_REMOVE_NULLSPACE
   num_cycles                 = NUM_INS_CYCLES

   //stokesSolver
   stokes_solver_type = "VC_STAGGERED_STOKES_PETSC_KRYLOV_SOLVER"
   stokes_solver_db {
   max_iterations = 100
   }

   // Solver parameters
   velocity_solver_type = "VC_VELOCITY_PETSC_KRYLOV_SOLVER"
   velocity_precond_type = "VC_VELOCITY_POINT_RELAXATION_FAC_PRECONDITIONER"
   velocity_solver_db {
      ksp_type = "richardson"
      max_iterations = 1
      rel_residual_tol = 1.0e-12
      enable_logging = FALSE
   }


   velocity_precond_db {
      num_pre_sweeps = 0
      num_post_sweeps = 3
      prolongation_method = "CONSERVATIVE_LINEAR_REFINE"
      restriction_method = "CONSERVATIVE_COARSEN"
      coarse_solver_type = "VC_VELOCITY_PETSC_LEVEL_SOLVER"
      coarse_solver_rel_residual_tol = 1.0e-12
      coarse_solver_abs_residual_tol = 1.0e-50
      coarse_solver_max_iterations = 1
      coarse_solver_db {
         ksp_type = "gmres"
         pc_type = "jacobi"
      }
   }
    pressure_solver_type = "PETSC_KRYLOV_SOLVER"
    pressure_precond_type = "POINT_RELAXATION_FAC_PRECONDITIONER"
    pressure_solver_db
    {
      ksp_type = "richardson"
      max_iterations = 2
      rel_residual_tol = 1.0e-1
    }
    pressure_precond_db {
      num_pre_sweeps  = 0
      num_post_sweeps = 3
      prolongation_method = "LINEAR_REFINE"
      restriction_method  = "CONSERVATIVE_COARSEN"
      coarse_solver_rel_residual_tol = 1.0e-12
      coarse_solver_abs_residual_tol = 1.0e-50
      coarse_solver_max_iterations = 1
      coarse_solver_db
      {
          solver_type          = "PFMG"
          num_pre_relax_steps  = 0
          num_post_relax_steps = 3
          enable_logging       = FALSE
      }
    }

}
AdvDiffSemiImplicitHierarchyIntegrator {
   start_time                    = START_TIME
   end_time                      = END_TIME
   grow_dt                       = GROW_DT
   num_cycles                    = ADV_DIFF_NUM_CYCLES
   convective_time_stepping_type = ADV_DIFF_CONVECTIVE_TS_TYPE
   convective_op_type            = ADV_DIFF_CONVECTIVE_OP_TYPE
   convective_difference_form    = ADV_DIFF_CONVECTIVE_FORM
   cfl                           = CFL_MAX
   dt_max                        = DT_MAX
   tag_buffer                    = TAG_BUFFER
   enable_logging                = ENABLE_LOGGING
}

LevelSet_Solid {
    order                 = LS_ORDER
    abs_tol               = LS_ABS_TOL
    max_iterations        = 0
    enable_logging        = TRUE
    reinit_interval	  = LS_REINIT_INTERVAL
    apply_sign_fix        = APPLY_SIGN_FIX
    apply_subcell_fix     = APPLY_SUBCELL_FIX
    apply_mass_constraint = APPLY_MASS_CONSTRAINT
}

RelaxationLSMethod {
    order              = "THIRD_ORDER_ENO"
    sweep_abs_tol      = 1e-5
    max_iterations     = MAX_ITERATIONS
    physical_bdry_wall = FALSE
    enable_logging     = TRUE
    reinit_interval    = LS_REINIT_INTERVAL
}

SurfaceTensionForceFunction {
    smoother            = DELTA_FUNCTION
    sigma               = SIGMA
    num_interface_cells = NUM_INTERFACE_CELLS

}

Main {
   solver_type = SOLVER_TYPE
   adv_diff_solver_type = ADV_DIFF_SOLVER_TYPE

   discretization_form = "NON_CONSERVATIVE"

// log file parameters
   log_file_name               = "20th_june_full.log"
   log_all_nodes               = FALSE

// visualization dump parameters
   viz_writer                  = "VisIt", "ExodusII"
   viz_dump_interval           = 500
   viz_dump_dirname            = "20th_june"
   visit_number_procs_per_file = 1


// restart dump parameters
   restart_dump_interval       = 0
   restart_dump_dirname        = "restart_test"

// timer dump parameters
   timer_dump_interval         = 0
}

CartesianGeometry {
   domain_boxes = [ (0,0,0) , ( NX_FINEST - 1, NY_FINEST - 1, NZ_FINEST - 1) ]
   x_lo         =   -0.5*L_X , -0.5*L_Y , -0.5*L_Z           // lower end of computational domain.
   x_up         =   0.5*L_X ,  0.5*L_Y ,  0.5*L_Z         // upper end of computational domain.
   periodic_dimension = 0, 0, 0 //set to be 0,0,0 to allow net inflow/outflow
}

GriddingAlgorithm {
   max_levels = MAX_LEVELS           // Maximum number of levels in hierarchy.
   ratio_to_coarser {
      level_1 = REF_RATIO,REF_RATIO,REF_RATIO  // vector ratio to next coarser level
      level_2 = REF_RATIO,REF_RATIO,REF_RATIO
      level_3 = REF_RATIO,REF_RATIO,REF_RATIO
      level_4 = REF_RATIO,REF_RATIO,REF_RATIO
      level_5 = REF_RATIO,REF_RATIO,REF_RATIO
      level_6 = REF_RATIO,REF_RATIO,REF_RATIO
      level_7 = REF_RATIO,REF_RATIO,REF_RATIO
   }

   largest_patch_size {
      level_0 = 2048, 2048, 2048 // largest patch allowed in hierarchy
                          // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =  8, 8, 8 // smallest patch allowed in hierarchy
                            // all finer levels will use same values as level_0...
   }

   allow_patches_smaller_than_minimum_size_to_prevent_overlaps = TRUE
   efficiency_tolerance   = 0.80e0    // min % of tag cells in new patch level
   combine_efficiency     = 0.80e0    // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR"
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 0.1

   timer_list = "IBAMR::*::*" , "IBTK::*::*" , "*::*::*"
}
